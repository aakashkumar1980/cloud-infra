output "DEBUG" {
  depends_on = [
    module.DATA
  ]
    
  value = [
    [{
      for x in [1] : "ec2" => (
        {
          for ec2 in flatten(concat(
            [module.DATA.output-ec2-by-vpc-region1],
            [module.DATA.output-ec2-by-vpc-region2]
            )) : join("",
            [split(".", ec2.tags["Name"])[2]], ["."],
            [split(".", lookup(ec2.tags, "UseCase", false))[3]], [" ("], [ec2.id], [")"], [" @"], [ec2.private_ip]
            ) => concat(

            # SUBNETS
            [{
              for subnet in flatten(concat(
                [module.DATA.output-subnets-by-vpc-region1],
                [module.DATA.output-subnets-by-vpc-region2]
                )) : join("",
                [split(".", subnet.tags["Name"])[2]],
                ["("], [subnet.id], [")"], [" @"], [subnet.cidr_block]
                ) => concat(

                # NACL
                [
                  for nacl in flatten(concat(
                    [module.DATA.output-nacl_ids-by-subnet-region1],
                    [module.DATA.output-nacl_ids-by-subnet-region2]
                    )) : concat(
                    distinct([
                      for v in(flatten([
                        for o in concat(
                          [local.vpc-peering.output4debug-file.DEBUG.value]
                          ) : (
                          [for v1 in o : ([for v2 in v1 : ([for v3 in v2 : ([for v4 in v3 : ([for v5 in element(v4, 0) : ([for v6 in element(v5, 0) : ({
                            for k7, v7 in v6 : k7 => concat(
                              [v7],
                              ["---"],
                              [
                                for i in flatten(concat(
                                  [module.SERVERS-CONFIGURATION.output-control_planes-server1-nacl_ingress_rule],
                                  [module.SERVERS-CONFIGURATION.output-nodes-kubelet-nacl_ingress_rule_nvirginia],
                                  [module.SERVERS-CONFIGURATION.output-nodes-kubelet-nacl_ingress_rule_london],
                                  [module.SERVERS-CONFIGURATION.output-nodes-nodeport-nacl_ingress_rule_nvirginia],
                                  [module.SERVERS-CONFIGURATION.output-nodes-nodeport-nacl_ingress_rule_london]
                                  )) : (
                                  join("", ["ingress: "], [i.rule_number], [" "],
                                    [
                                      (i.protocol == "1") ? "ICMP" : ((i.protocol == "6") ? "TCP " : ((i.protocol == "17") ? "UDP " : "n/a "))
                                    ], [" "], [i.from_port], ["-"], [i.to_port],
                                    ["    <- "], [i.cidr_block], [" "], [
                                      for vpc in flatten(concat(
                                        [module.DATA.output-vpcs-by-region1],
                                        [module.DATA.output-vpcs-by-region2],
                                        [module.DATA.output-subnets-by-vpc-region1],
                                        [module.DATA.output-subnets-by-vpc-region2]
                                        )) : (
                                        join("",
                                          [split(".", vpc.tags["Name"])[1]], ["."], [split(".", vpc.tags["Name"])[2]],
                                          ["("], [vpc.id], [")"]
                                        )
                                      ) if(i.cidr_block == vpc.cidr_block)
                                    ]
                                  )
                                ) if(i.network_acl_id == join("", nacl.ids))
                              ]

                            ) if(length(regexall("(${join("", [for v in flatten([nacl.ids[*]]) : v])})", k7)) != 0)
                          })])])])])])]
                        )
                      ])) : v if(v != {})
                    ])
                  ) if([subnet.id] == flatten([nacl.filter[*].values[*]]))
                ],

                # ROUTETABLE
                [{
                  for rt in flatten(concat(
                    [module.DATA.output-rt-by-subnet-region1],
                    [module.DATA.output-rt-by-subnet-region2]
                    )) : join("", [split(".", rt.tags["Name"])[2]], ["("], [rt.id], [")"]) => concat(
                    [join("", ["local"], ["    <-> "], [
                      for v in flatten(concat(
                        [module.DATA.output-vpcs-by-region1],
                        [module.DATA.output-vpcs-by-region2],
                        [module.DATA.output-subnets-by-vpc-region1],
                        [module.DATA.output-subnets-by-vpc-region2]
                      )) : v.cidr_block if(v.id == rt.vpc_id)
                    ])],
                    [
                      for r in rt.routes : (
                        join("",
                          [
                            for igw in flatten(concat(
                              [module.DATA.output-igw-by-vpc-region1],
                              [module.DATA.output-igw-by-vpc-region2]
                              )) : (
                              join("", [substr(igw.tags["Name"], 17, length(igw.tags["Name"])), "(", igw.id, ")"])
                            ) if(igw.id == r.gateway_id)
                          ],
                          [
                            for e in flatten(concat(
                              [module.DATA.output-ec2-by-vpc-region1],
                              [module.DATA.output-ec2-by-vpc-region2]
                              )) : (
                              join("", [split(".", e.tags["Name"])[3]], ["("], [e.id], [")"])
                            ) if(e.id == r.instance_id)
                          ],
                          [
                            for p in flatten(concat(
                              [module.DATA.output-peering_connection-by-vpc-region1],
                              [module.DATA.output-peering_connection-by-vpc-region2]
                              )) : (
                              join("", [split(".", p.tags["Name"])[2]], ["("], [p.id], [")"])
                            ) if(p.id == r.vpc_peering_connection_id)
                          ],
                          ["    <-> "], [r.cidr_block], [
                            # remove 'vpc_a-copy' as it is not used in this usecase
                            split(" vpc_a-copy", join("", [
                              for v in flatten(concat(
                                [module.DATA.output-vpcs-by-region1],
                                [module.DATA.output-vpcs-by-region2],
                                [module.DATA.output-subnets-by-vpc-region1],
                                [module.DATA.output-subnets-by-vpc-region2]
                                )) : (
                                  (length(v.tags)==0)? 
                                  "":join("", [" "], [split(".", v.tags["Name"])[1]], ["("], [v.id], [")"])
                              ) if(v.cidr_block == r.cidr_block)
                            ]))[0]
                          ]
                        )
                      )
                    ]
                  )... if(contains(flatten(rt.associations[*].subnet_id), subnet.id))
                }]

              ) if(subnet.id == ec2.subnet_id)
            }],

            # SECURITY GROUP
            ## NOTE: Please remove duplicate entries manually
            [{
              for x in [1] : "securitygroups" => [for v in flatten(concat(
                [
                  for sg in flatten(concat(
                    [module.DATA.output-sg-by-vpc-region1],
                    [module.DATA.output-sg-by-vpc-region2]
                    )) : flatten(distinct(
                    [
                      for v in(flatten([
                        for o in concat(
                          [local.vpc-peering.output4debug-file.DEBUG.value]
                          ) : (
                          [for v1 in o : ([for v2 in v1 : ([for v3 in v2 : ([for v4 in v3 : ([for v5 in element(v4, 1).securitygroups : (
                            v5
                            ) if(length(regexall("(${sg.id})", jsonencode(v5))) != 0)
                          ])])])])]
                        )
                      ])) : v if(v != {})
                    ]
                  )) if(contains(ec2.vpc_security_group_ids, sg.id))
                ],
                [{
                  for sg in flatten(concat(
                    [module.SERVERS-CONFIGURATION.output-control_planes-server1-sg],
                    [module.SERVERS-CONFIGURATION.output-nodes-kubelet-sg_nvirginia],
                    [module.SERVERS-CONFIGURATION.output-nodes-kubelet-sg_london],
                    [module.SERVERS-CONFIGURATION.output-nodes-nodeport-sg_nvirginia],
                    [module.SERVERS-CONFIGURATION.output-nodes-nodeport-sg_london]
                    )) : join("",
                    [split(".", sg.tags["Name"])[2]], ["."], [split(".", sg.tags["Name"])[3]],
                    ["("], [sg.id], [")"]
                    ) => distinct(concat(
                      (length(sg.ingress) == 0)? [""]:
                      [
                        for cidr in tolist(sg.ingress)[0].cidr_blocks : (
                          join("",
                            [join(" | ", [for i in sg.ingress[*] :
                              join("", [i.protocol], ["("], [i.from_port], ["-"], [i.to_port], [")"])
                            ])],
                            ["    <- "], [cidr], [" "],
                            [for vpc in flatten(concat(
                              [module.DATA.output-vpcs-by-region1],
                              [module.DATA.output-vpcs-by-region2],
                              [module.DATA.output-subnets-by-vpc-region1],
                              [module.DATA.output-subnets-by-vpc-region2]
                              )) : (
                              join("",
                                [split(".", vpc.tags["Name"])[1]], ["."], [split(".", vpc.tags["Name"])[2]],
                                [" ("], [vpc.id], [")"]
                              )
                              ) if(cidr == vpc.cidr_block)
                            ]
                          )
                        )
                      ]
                  )) if(contains(ec2.vpc_security_group_ids, sg.id))
                }]

              )) : v if(v != {})]
            }]


          ) if(lookup(ec2.tags, "UseCase", false) != "false")

        }
      )
    }]
  ]
}
